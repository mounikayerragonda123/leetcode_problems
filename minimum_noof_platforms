.Minimum Number of Platforms Required for a Railway/Bus Station
Given the arrival and departure times of all trains that reach a railway station, the task is to find the minimum number of platforms required for the railway station so that no train waits. We are given two arrays that represent the arrival and departure times of trains that stop.

Examples:
Input: arr[] = {9:00, 9:40, 9:50, 11:00, 15:00, 18:00}, dep[] = {9:10, 12:00, 11:20, 11:30, 19:00, 20:00}
Output: 3
Explanation: There are at-most three trains at a time (time between 9:40 to 12:00)
Input: arr[] = {9:00, 9:40}, dep[] = {9:10, 12:00}
Output: 1
Explanation: Only one platform is needed.
The heapq.heappush function is a method provided by Python's heapq module, allowing you to add elements to a heap while maintaining the heap property. In this context, the function heappush is being used to add an element to the heap p.
The heapq.heappop() function is part of Python's heapq module, used specifically for heaps, which are a type of specialized tree-based data structure.
import heapq
# Function to find the minimum number
# of platforms required

def findPlatform(arr, dep, n):
	arr2 = []
	# Store the arrival and departure time
	for i in range(n):
		arr2.append([arr[i], dep[i]])
	arr2.sort() # Sort trains based on arrival time
	p = []
	count = 1
	heapq.heappush(p, arr2[0][1])
	for i in range(1, n):
		# Check if arrival time of current train
		# is less than or equals to departure time
		# of previous train
		if p[0] >= arr2[i][0]:
			count += 1
		else:
			heapq.heappop(p)
		heapq.heappush(p, arr2[i][1])
	# return the count of number of platforms required
	return count


if __name__ == "__main__":
	arr = [900, 940, 950, 1100, 1500, 1800]
	dep = [910, 1200, 1120, 1130, 1900, 2000]
	n = len(arr)
	print(findPlatform(arr, dep, n))
